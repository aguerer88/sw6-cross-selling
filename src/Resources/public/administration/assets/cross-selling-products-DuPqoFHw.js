const s=`{% block sw_category_view_tabs_seo %} {% parent %} <sw-tabs-item class="sw-category-detail__tab-cross" :route="{ name: 'sw.category.detail.cross', params: { id: category.id } }" :title="Cross-Selling"> Cross Selling </sw-tabs-item> {% endblock %}`;Shopware.Component.override("sw-category-view",{template:s});const i=`<template v-for="(group, index) in groups" :key="group.id"> <sw-card title="Neues Cross Selling" :hero="false" :isLoading="false" :large="false"> <template #headerRight> <div class="sw-product-detail-cross-selling__context-button"> <sw-context-button> <sw-context-menu-item variant="danger" class="sw-product-cross_selling-context-item__delete-action" @click="removeGroup(index)" > delete </sw-context-menu-item> </sw-context-button> </div> </template> <sw-container columns="1fr 1fr" gap="0px 30px" align="start"> <mt-text-field v-model="group.name" name="sw-field--crossSelling-group" :label="'Titel'" required :placeholder="'Gib einen namen ein'" /> <mt-number-field v-model="group.position" number-type="int" :min="1" :max="2" :label="'Position'" :placeholder="'1'" /> <sw-entity-single-select id="sw-field--group-product-group" v-model:value="group.productStreamId" entity="product_stream" class="sw-select-cross-selling__select-product-stream" :label="'Dynamische Produktgruppe'" :placeholder="'Produktgruppe auswählen'" </sw-entity-single-select> <sw-entity-multi-id-select label="Bis zu 3 Produkte" :repository="productRepository" :criteria="productCriteria" v-model:value="group.productIds" placeholder="Produkte auswählen" :max-selection="3" label-property="name"> </sw-entity-multi-id-select> <sw-button @click="onSave">Konfiguration speichern</sw-button> </sw-container> </sw-card> </template> <div style="display: flex; justify-content: center; margin-top: 20px;"> <sw-button @click="addGroup">Gruppe hinzufügen</sw-button> </div>`;Shopware.Component.register("sw-category-detail-cross",{template:i,inject:["repositoryFactory"],mixins:[Shopware.Mixin.getByName("notification")],data(){return{groups:[],categoryId:null,productCriteria:null,isLoading:!1}},computed:{crossSellingGroupRepository(){return this.repositoryFactory.create("cross_selling_product_group")},productRepository(){return this.repositoryFactory.create("product")}},created(){this.categoryId=this.$route.params.id,this.initCriteria(),this.loadGroups()},methods:{initCriteria(){this.productCriteria=new Shopware.Data.Criteria,this.productCriteria.addFilter(Shopware.Data.Criteria.equals("active",!0))},loadGroups(){const e=new Shopware.Data.Criteria;e.addFilter(Shopware.Data.Criteria.equals("categoryId",this.categoryId)),e.addSorting(Shopware.Data.Criteria.sort("position","ASC")),this.crossSellingGroupRepository.search(e,Shopware.Context.api).then(t=>{Array.isArray(t)?this.groups=t:(this.groups=[],this.createNotificationError({title:"Fehler",message:"Unbekanntes Resultatformat bei Suche"}))})},addGroup(){const e=this.crossSellingGroupRepository.create(Shopware.Context.api);e.categoryId=this.categoryId,e.position=this.groups.length+1,e.productIds=[],this.groups.push(e)},removeGroup(e){const t=this.groups[e];t.id?this.crossSellingGroupRepository.delete(t.id,Shopware.Context.api).then(()=>{this.groups.splice(e,1)}):this.groups.splice(e,1)},async onSave(){this.isLoading=!0;try{for(const e of this.groups)await this.crossSellingGroupRepository.save(e,Shopware.Context.api);this.createNotificationSuccess({title:"Erfolg",message:"Cross Selling Produkte erfolgreich angelegt."}),this.loadGroups()}catch(e){this.createNotificationError({title:"Fehler",message:"Die Cross Selling Produkte konnten nicht angelegt werden."}),console.error(e)}finally{this.isLoading=!1}}}});Shopware.Module.register("sw-category-cross-selling",{routeMiddleware(e,t){const r="sw.category.detail.cross";t.name==="sw.category.detail"&&t.children.every(o=>o.name!==r)&&t.children.push({name:r,path:"cross-selling",component:"sw-category-detail-cross",meta:{parentPath:"sw.category.index"}}),e(t)}});
//# sourceMappingURL=cross-selling-products-DuPqoFHw.js.map
